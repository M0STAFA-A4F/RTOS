
RTOS_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  00000a76  2**0
                  ALLOC
  2 .stab         00000bdc  00000000  00000000  00000a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000098d  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bd 04 	call	0x97a	; 0x97a <main>
  74:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_VidSetPinDirection>:

#include "DIO_Register.h"


void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Dir)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_VidSetPinDirection+0x22>
  9c:	ea c0       	rjmp	.+468    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
	{
		if(0 == Copy_u8Dir)
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	88 23       	and	r24, r24
  a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_VidSetPinDirection+0x2a>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <DIO_VidSetPinDirection+0x112>
		{
			switch(Copy_u8Port)
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	3f 83       	std	Y+7, r19	; 0x07
  ae:	2e 83       	std	Y+6, r18	; 0x06
  b0:	8e 81       	ldd	r24, Y+6	; 0x06
  b2:	9f 81       	ldd	r25, Y+7	; 0x07
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	59 f1       	breq	.+86     	; 0x110 <DIO_VidSetPinDirection+0x94>
  ba:	2e 81       	ldd	r18, Y+6	; 0x06
  bc:	3f 81       	ldd	r19, Y+7	; 0x07
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	2c f4       	brge	.+10     	; 0xce <DIO_VidSetPinDirection+0x52>
  c4:	8e 81       	ldd	r24, Y+6	; 0x06
  c6:	9f 81       	ldd	r25, Y+7	; 0x07
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	69 f0       	breq	.+26     	; 0xe6 <DIO_VidSetPinDirection+0x6a>
  cc:	d2 c0       	rjmp	.+420    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
  ce:	2e 81       	ldd	r18, Y+6	; 0x06
  d0:	3f 81       	ldd	r19, Y+7	; 0x07
  d2:	22 30       	cpi	r18, 0x02	; 2
  d4:	31 05       	cpc	r19, r1
  d6:	89 f1       	breq	.+98     	; 0x13a <DIO_VidSetPinDirection+0xbe>
  d8:	8e 81       	ldd	r24, Y+6	; 0x06
  da:	9f 81       	ldd	r25, Y+7	; 0x07
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	91 05       	cpc	r25, r1
  e0:	09 f4       	brne	.+2      	; 0xe4 <DIO_VidSetPinDirection+0x68>
  e2:	40 c0       	rjmp	.+128    	; 0x164 <DIO_VidSetPinDirection+0xe8>
  e4:	c6 c0       	rjmp	.+396    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
			{
				case 0: CLR_BIT(DDRA,Copy_u8Pin); break;
  e6:	aa e3       	ldi	r26, 0x3A	; 58
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	ea e3       	ldi	r30, 0x3A	; 58
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	48 2f       	mov	r20, r24
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 2e       	mov	r0, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_VidSetPinDirection+0x88>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_VidSetPinDirection+0x84>
 108:	80 95       	com	r24
 10a:	84 23       	and	r24, r20
 10c:	8c 93       	st	X, r24
 10e:	b1 c0       	rjmp	.+354    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 1: CLR_BIT(DDRB,Copy_u8Pin); break;
 110:	a7 e3       	ldi	r26, 0x37	; 55
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e7 e3       	ldi	r30, 0x37	; 55
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_VidSetPinDirection+0xb2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_VidSetPinDirection+0xae>
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	8c 93       	st	X, r24
 138:	9c c0       	rjmp	.+312    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 2: CLR_BIT(DDRC,Copy_u8Pin); break;
 13a:	a4 e3       	ldi	r26, 0x34	; 52
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e4 e3       	ldi	r30, 0x34	; 52
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	48 2f       	mov	r20, r24
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 2e       	mov	r0, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_VidSetPinDirection+0xdc>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_VidSetPinDirection+0xd8>
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	8c 93       	st	X, r24
 162:	87 c0       	rjmp	.+270    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 3: CLR_BIT(DDRD,Copy_u8Pin); break;
 164:	a1 e3       	ldi	r26, 0x31	; 49
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e1 e3       	ldi	r30, 0x31	; 49
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	48 2f       	mov	r20, r24
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 2e       	mov	r0, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_VidSetPinDirection+0x106>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	0a 94       	dec	r0
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_VidSetPinDirection+0x102>
 186:	80 95       	com	r24
 188:	84 23       	and	r24, r20
 18a:	8c 93       	st	X, r24
 18c:	72 c0       	rjmp	.+228    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
			}
		}
		else if(1 == Copy_u8Dir)
 18e:	8b 81       	ldd	r24, Y+3	; 0x03
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	09 f0       	breq	.+2      	; 0x196 <DIO_VidSetPinDirection+0x11a>
 194:	6e c0       	rjmp	.+220    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
		{
			switch(Copy_u8Port)
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	28 2f       	mov	r18, r24
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	3d 83       	std	Y+5, r19	; 0x05
 19e:	2c 83       	std	Y+4, r18	; 0x04
 1a0:	8c 81       	ldd	r24, Y+4	; 0x04
 1a2:	9d 81       	ldd	r25, Y+5	; 0x05
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	49 f1       	breq	.+82     	; 0x1fc <DIO_VidSetPinDirection+0x180>
 1aa:	2c 81       	ldd	r18, Y+4	; 0x04
 1ac:	3d 81       	ldd	r19, Y+5	; 0x05
 1ae:	22 30       	cpi	r18, 0x02	; 2
 1b0:	31 05       	cpc	r19, r1
 1b2:	2c f4       	brge	.+10     	; 0x1be <DIO_VidSetPinDirection+0x142>
 1b4:	8c 81       	ldd	r24, Y+4	; 0x04
 1b6:	9d 81       	ldd	r25, Y+5	; 0x05
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	61 f0       	breq	.+24     	; 0x1d4 <DIO_VidSetPinDirection+0x158>
 1bc:	5a c0       	rjmp	.+180    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
 1be:	2c 81       	ldd	r18, Y+4	; 0x04
 1c0:	3d 81       	ldd	r19, Y+5	; 0x05
 1c2:	22 30       	cpi	r18, 0x02	; 2
 1c4:	31 05       	cpc	r19, r1
 1c6:	71 f1       	breq	.+92     	; 0x224 <DIO_VidSetPinDirection+0x1a8>
 1c8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ca:	9d 81       	ldd	r25, Y+5	; 0x05
 1cc:	83 30       	cpi	r24, 0x03	; 3
 1ce:	91 05       	cpc	r25, r1
 1d0:	e9 f1       	breq	.+122    	; 0x24c <DIO_VidSetPinDirection+0x1d0>
 1d2:	4f c0       	rjmp	.+158    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
			{
				case 0: SET_BIT(DDRA,Copy_u8Pin); break;
 1d4:	aa e3       	ldi	r26, 0x3A	; 58
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	ea e3       	ldi	r30, 0x3A	; 58
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	48 2f       	mov	r20, r24
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 2e       	mov	r0, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_VidSetPinDirection+0x176>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_VidSetPinDirection+0x172>
 1f6:	84 2b       	or	r24, r20
 1f8:	8c 93       	st	X, r24
 1fa:	3b c0       	rjmp	.+118    	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 1: SET_BIT(DDRB,Copy_u8Pin); break;
 1fc:	a7 e3       	ldi	r26, 0x37	; 55
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e7 e3       	ldi	r30, 0x37	; 55
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_VidSetPinDirection+0x19e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_VidSetPinDirection+0x19a>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
 222:	27 c0       	rjmp	.+78     	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 2: SET_BIT(DDRC,Copy_u8Pin); break;
 224:	a4 e3       	ldi	r26, 0x34	; 52
 226:	b0 e0       	ldi	r27, 0x00	; 0
 228:	e4 e3       	ldi	r30, 0x34	; 52
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	48 2f       	mov	r20, r24
 230:	8a 81       	ldd	r24, Y+2	; 0x02
 232:	28 2f       	mov	r18, r24
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_VidSetPinDirection+0x1c6>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_VidSetPinDirection+0x1c2>
 246:	84 2b       	or	r24, r20
 248:	8c 93       	st	X, r24
 24a:	13 c0       	rjmp	.+38     	; 0x272 <DIO_VidSetPinDirection+0x1f6>
				case 3: SET_BIT(DDRD,Copy_u8Pin); break;
 24c:	a1 e3       	ldi	r26, 0x31	; 49
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e1 e3       	ldi	r30, 0x31	; 49
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	48 2f       	mov	r20, r24
 258:	8a 81       	ldd	r24, Y+2	; 0x02
 25a:	28 2f       	mov	r18, r24
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 2e       	mov	r0, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_VidSetPinDirection+0x1ee>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_VidSetPinDirection+0x1ea>
 26e:	84 2b       	or	r24, r20
 270:	8c 93       	st	X, r24
			}
		}
	}
}
 272:	27 96       	adiw	r28, 0x07	; 7
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	cf 91       	pop	r28
 280:	df 91       	pop	r29
 282:	08 95       	ret

00000284 <DIO_VidSetPinValue>:

void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Val)
{
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	27 97       	sbiw	r28, 0x07	; 7
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	89 83       	std	Y+1, r24	; 0x01
 29a:	6a 83       	std	Y+2, r22	; 0x02
 29c:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <DIO_VidSetPinValue+0x22>
 2a4:	ea c0       	rjmp	.+468    	; 0x47a <DIO_VidSetPinValue+0x1f6>
	{
		if(0 == Copy_u8Val)
 2a6:	8b 81       	ldd	r24, Y+3	; 0x03
 2a8:	88 23       	and	r24, r24
 2aa:	09 f0       	breq	.+2      	; 0x2ae <DIO_VidSetPinValue+0x2a>
 2ac:	74 c0       	rjmp	.+232    	; 0x396 <DIO_VidSetPinValue+0x112>
		{
			switch(Copy_u8Port)
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	3f 83       	std	Y+7, r19	; 0x07
 2b6:	2e 83       	std	Y+6, r18	; 0x06
 2b8:	8e 81       	ldd	r24, Y+6	; 0x06
 2ba:	9f 81       	ldd	r25, Y+7	; 0x07
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	91 05       	cpc	r25, r1
 2c0:	59 f1       	breq	.+86     	; 0x318 <DIO_VidSetPinValue+0x94>
 2c2:	2e 81       	ldd	r18, Y+6	; 0x06
 2c4:	3f 81       	ldd	r19, Y+7	; 0x07
 2c6:	22 30       	cpi	r18, 0x02	; 2
 2c8:	31 05       	cpc	r19, r1
 2ca:	2c f4       	brge	.+10     	; 0x2d6 <DIO_VidSetPinValue+0x52>
 2cc:	8e 81       	ldd	r24, Y+6	; 0x06
 2ce:	9f 81       	ldd	r25, Y+7	; 0x07
 2d0:	00 97       	sbiw	r24, 0x00	; 0
 2d2:	69 f0       	breq	.+26     	; 0x2ee <DIO_VidSetPinValue+0x6a>
 2d4:	d2 c0       	rjmp	.+420    	; 0x47a <DIO_VidSetPinValue+0x1f6>
 2d6:	2e 81       	ldd	r18, Y+6	; 0x06
 2d8:	3f 81       	ldd	r19, Y+7	; 0x07
 2da:	22 30       	cpi	r18, 0x02	; 2
 2dc:	31 05       	cpc	r19, r1
 2de:	89 f1       	breq	.+98     	; 0x342 <DIO_VidSetPinValue+0xbe>
 2e0:	8e 81       	ldd	r24, Y+6	; 0x06
 2e2:	9f 81       	ldd	r25, Y+7	; 0x07
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	91 05       	cpc	r25, r1
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_VidSetPinValue+0x68>
 2ea:	40 c0       	rjmp	.+128    	; 0x36c <DIO_VidSetPinValue+0xe8>
 2ec:	c6 c0       	rjmp	.+396    	; 0x47a <DIO_VidSetPinValue+0x1f6>
			{
				case 0: CLR_BIT(_PORTA,Copy_u8Pin); break;
 2ee:	ab e3       	ldi	r26, 0x3B	; 59
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	eb e3       	ldi	r30, 0x3B	; 59
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	48 2f       	mov	r20, r24
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	28 2f       	mov	r18, r24
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 2e       	mov	r0, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_VidSetPinValue+0x88>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_VidSetPinValue+0x84>
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8c 93       	st	X, r24
 316:	b1 c0       	rjmp	.+354    	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 1: CLR_BIT(_PORTB,Copy_u8Pin); break;
 318:	a8 e3       	ldi	r26, 0x38	; 56
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	e8 e3       	ldi	r30, 0x38	; 56
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	48 2f       	mov	r20, r24
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 2e       	mov	r0, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_VidSetPinValue+0xb2>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_VidSetPinValue+0xae>
 33a:	80 95       	com	r24
 33c:	84 23       	and	r24, r20
 33e:	8c 93       	st	X, r24
 340:	9c c0       	rjmp	.+312    	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 2: CLR_BIT(_PORTC,Copy_u8Pin); break;
 342:	a5 e3       	ldi	r26, 0x35	; 53
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e5 e3       	ldi	r30, 0x35	; 53
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	48 2f       	mov	r20, r24
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	28 2f       	mov	r18, r24
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 2e       	mov	r0, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_VidSetPinValue+0xdc>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_VidSetPinValue+0xd8>
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	8c 93       	st	X, r24
 36a:	87 c0       	rjmp	.+270    	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 3: CLR_BIT(_PORTD,Copy_u8Pin); break;
 36c:	a2 e3       	ldi	r26, 0x32	; 50
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e2 e3       	ldi	r30, 0x32	; 50
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	48 2f       	mov	r20, r24
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_VidSetPinValue+0x106>
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_VidSetPinValue+0x102>
 38e:	80 95       	com	r24
 390:	84 23       	and	r24, r20
 392:	8c 93       	st	X, r24
 394:	72 c0       	rjmp	.+228    	; 0x47a <DIO_VidSetPinValue+0x1f6>
			}
		}
		else if(1 == Copy_u8Val)
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	09 f0       	breq	.+2      	; 0x39e <DIO_VidSetPinValue+0x11a>
 39c:	6e c0       	rjmp	.+220    	; 0x47a <DIO_VidSetPinValue+0x1f6>
		{
			switch(Copy_u8Port)
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	3d 83       	std	Y+5, r19	; 0x05
 3a6:	2c 83       	std	Y+4, r18	; 0x04
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	9d 81       	ldd	r25, Y+5	; 0x05
 3ac:	81 30       	cpi	r24, 0x01	; 1
 3ae:	91 05       	cpc	r25, r1
 3b0:	49 f1       	breq	.+82     	; 0x404 <DIO_VidSetPinValue+0x180>
 3b2:	2c 81       	ldd	r18, Y+4	; 0x04
 3b4:	3d 81       	ldd	r19, Y+5	; 0x05
 3b6:	22 30       	cpi	r18, 0x02	; 2
 3b8:	31 05       	cpc	r19, r1
 3ba:	2c f4       	brge	.+10     	; 0x3c6 <DIO_VidSetPinValue+0x142>
 3bc:	8c 81       	ldd	r24, Y+4	; 0x04
 3be:	9d 81       	ldd	r25, Y+5	; 0x05
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	61 f0       	breq	.+24     	; 0x3dc <DIO_VidSetPinValue+0x158>
 3c4:	5a c0       	rjmp	.+180    	; 0x47a <DIO_VidSetPinValue+0x1f6>
 3c6:	2c 81       	ldd	r18, Y+4	; 0x04
 3c8:	3d 81       	ldd	r19, Y+5	; 0x05
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	71 f1       	breq	.+92     	; 0x42c <DIO_VidSetPinValue+0x1a8>
 3d0:	8c 81       	ldd	r24, Y+4	; 0x04
 3d2:	9d 81       	ldd	r25, Y+5	; 0x05
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	91 05       	cpc	r25, r1
 3d8:	e9 f1       	breq	.+122    	; 0x454 <DIO_VidSetPinValue+0x1d0>
 3da:	4f c0       	rjmp	.+158    	; 0x47a <DIO_VidSetPinValue+0x1f6>
			{
				case 0: SET_BIT(_PORTA,Copy_u8Pin); break;
 3dc:	ab e3       	ldi	r26, 0x3B	; 59
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	eb e3       	ldi	r30, 0x3B	; 59
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	48 2f       	mov	r20, r24
 3e8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ea:	28 2f       	mov	r18, r24
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 2e       	mov	r0, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_VidSetPinValue+0x176>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_VidSetPinValue+0x172>
 3fe:	84 2b       	or	r24, r20
 400:	8c 93       	st	X, r24
 402:	3b c0       	rjmp	.+118    	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 1: SET_BIT(_PORTB,Copy_u8Pin); break;
 404:	a8 e3       	ldi	r26, 0x38	; 56
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e3       	ldi	r30, 0x38	; 56
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_VidSetPinValue+0x19e>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_VidSetPinValue+0x19a>
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	27 c0       	rjmp	.+78     	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 2: SET_BIT(_PORTC,Copy_u8Pin); break;
 42c:	a5 e3       	ldi	r26, 0x35	; 53
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e5 e3       	ldi	r30, 0x35	; 53
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_VidSetPinValue+0x1c6>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_VidSetPinValue+0x1c2>
 44e:	84 2b       	or	r24, r20
 450:	8c 93       	st	X, r24
 452:	13 c0       	rjmp	.+38     	; 0x47a <DIO_VidSetPinValue+0x1f6>
				case 3: SET_BIT(_PORTD,Copy_u8Pin); break;
 454:	a2 e3       	ldi	r26, 0x32	; 50
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e2 e3       	ldi	r30, 0x32	; 50
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	48 2f       	mov	r20, r24
 460:	8a 81       	ldd	r24, Y+2	; 0x02
 462:	28 2f       	mov	r18, r24
 464:	30 e0       	ldi	r19, 0x00	; 0
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	02 2e       	mov	r0, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_VidSetPinValue+0x1ee>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	0a 94       	dec	r0
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_VidSetPinValue+0x1ea>
 476:	84 2b       	or	r24, r20
 478:	8c 93       	st	X, r24
			}
		}
	}
}
 47a:	27 96       	adiw	r28, 0x07	; 7
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
 486:	cf 91       	pop	r28
 488:	df 91       	pop	r29
 48a:	08 95       	ret

0000048c <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 48c:	df 93       	push	r29
 48e:	cf 93       	push	r28
 490:	00 d0       	rcall	.+0      	; 0x492 <DIO_U8GetPinValue+0x6>
 492:	00 d0       	rcall	.+0      	; 0x494 <DIO_U8GetPinValue+0x8>
 494:	0f 92       	push	r0
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	8a 83       	std	Y+2, r24	; 0x02
 49c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Ret_Value;
	
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 49e:	8b 81       	ldd	r24, Y+3	; 0x03
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	08 f0       	brcs	.+2      	; 0x4a6 <DIO_U8GetPinValue+0x1a>
 4a4:	67 c0       	rjmp	.+206    	; 0x574 <DIO_U8GetPinValue+0xe8>
	{
		switch(Copy_u8Port)
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	28 2f       	mov	r18, r24
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	3d 83       	std	Y+5, r19	; 0x05
 4ae:	2c 83       	std	Y+4, r18	; 0x04
 4b0:	4c 81       	ldd	r20, Y+4	; 0x04
 4b2:	5d 81       	ldd	r21, Y+5	; 0x05
 4b4:	41 30       	cpi	r20, 0x01	; 1
 4b6:	51 05       	cpc	r21, r1
 4b8:	41 f1       	breq	.+80     	; 0x50a <DIO_U8GetPinValue+0x7e>
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	91 05       	cpc	r25, r1
 4c2:	34 f4       	brge	.+12     	; 0x4d0 <DIO_U8GetPinValue+0x44>
 4c4:	2c 81       	ldd	r18, Y+4	; 0x04
 4c6:	3d 81       	ldd	r19, Y+5	; 0x05
 4c8:	21 15       	cp	r18, r1
 4ca:	31 05       	cpc	r19, r1
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <DIO_U8GetPinValue+0x5a>
 4ce:	52 c0       	rjmp	.+164    	; 0x574 <DIO_U8GetPinValue+0xe8>
 4d0:	4c 81       	ldd	r20, Y+4	; 0x04
 4d2:	5d 81       	ldd	r21, Y+5	; 0x05
 4d4:	42 30       	cpi	r20, 0x02	; 2
 4d6:	51 05       	cpc	r21, r1
 4d8:	51 f1       	breq	.+84     	; 0x52e <DIO_U8GetPinValue+0xa2>
 4da:	8c 81       	ldd	r24, Y+4	; 0x04
 4dc:	9d 81       	ldd	r25, Y+5	; 0x05
 4de:	83 30       	cpi	r24, 0x03	; 3
 4e0:	91 05       	cpc	r25, r1
 4e2:	b9 f1       	breq	.+110    	; 0x552 <DIO_U8GetPinValue+0xc6>
 4e4:	47 c0       	rjmp	.+142    	; 0x574 <DIO_U8GetPinValue+0xe8>
		{
			case 0: Ret_Value = GET_BIT(PINA,Copy_u8Pin); break;
 4e6:	e9 e3       	ldi	r30, 0x39	; 57
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	28 2f       	mov	r18, r24
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_U8GetPinValue+0x72>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_U8GetPinValue+0x6e>
 502:	ca 01       	movw	r24, r20
 504:	81 70       	andi	r24, 0x01	; 1
 506:	89 83       	std	Y+1, r24	; 0x01
 508:	35 c0       	rjmp	.+106    	; 0x574 <DIO_U8GetPinValue+0xe8>
			case 1: Ret_Value = GET_BIT(PINB,Copy_u8Pin); break;
 50a:	e6 e3       	ldi	r30, 0x36	; 54
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	88 2f       	mov	r24, r24
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a9 01       	movw	r20, r18
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_U8GetPinValue+0x96>
 51e:	55 95       	asr	r21
 520:	47 95       	ror	r20
 522:	8a 95       	dec	r24
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_U8GetPinValue+0x92>
 526:	ca 01       	movw	r24, r20
 528:	81 70       	andi	r24, 0x01	; 1
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	23 c0       	rjmp	.+70     	; 0x574 <DIO_U8GetPinValue+0xe8>
			case 2: Ret_Value = GET_BIT(PINC,Copy_u8Pin); break;
 52e:	e3 e3       	ldi	r30, 0x33	; 51
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	28 2f       	mov	r18, r24
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	a9 01       	movw	r20, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_U8GetPinValue+0xba>
 542:	55 95       	asr	r21
 544:	47 95       	ror	r20
 546:	8a 95       	dec	r24
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_U8GetPinValue+0xb6>
 54a:	ca 01       	movw	r24, r20
 54c:	81 70       	andi	r24, 0x01	; 1
 54e:	89 83       	std	Y+1, r24	; 0x01
 550:	11 c0       	rjmp	.+34     	; 0x574 <DIO_U8GetPinValue+0xe8>
			case 3: Ret_Value = GET_BIT(PIND,Copy_u8Pin); break;
 552:	e0 e3       	ldi	r30, 0x30	; 48
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	28 2f       	mov	r18, r24
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	8b 81       	ldd	r24, Y+3	; 0x03
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	a9 01       	movw	r20, r18
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_U8GetPinValue+0xde>
 566:	55 95       	asr	r21
 568:	47 95       	ror	r20
 56a:	8a 95       	dec	r24
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_U8GetPinValue+0xda>
 56e:	ca 01       	movw	r24, r20
 570:	81 70       	andi	r24, 0x01	; 1
 572:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	
	return Ret_Value;
 574:	89 81       	ldd	r24, Y+1	; 0x01
}
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	cf 91       	pop	r28
 582:	df 91       	pop	r29
 584:	08 95       	ret

00000586 <DIO_VidTogglePinValue>:

void DIO_VidTogglePinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 586:	df 93       	push	r29
 588:	cf 93       	push	r28
 58a:	00 d0       	rcall	.+0      	; 0x58c <DIO_VidTogglePinValue+0x6>
 58c:	00 d0       	rcall	.+0      	; 0x58e <DIO_VidTogglePinValue+0x8>
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8Pin >= 0 && Copy_u8Pin <= 7)
 596:	8a 81       	ldd	r24, Y+2	; 0x02
 598:	88 30       	cpi	r24, 0x08	; 8
 59a:	08 f0       	brcs	.+2      	; 0x59e <DIO_VidTogglePinValue+0x18>
 59c:	6e c0       	rjmp	.+220    	; 0x67a <DIO_VidTogglePinValue+0xf4>
	{
		switch(Copy_u8Port)
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	28 2f       	mov	r18, r24
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	3c 83       	std	Y+4, r19	; 0x04
 5a6:	2b 83       	std	Y+3, r18	; 0x03
 5a8:	8b 81       	ldd	r24, Y+3	; 0x03
 5aa:	9c 81       	ldd	r25, Y+4	; 0x04
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	91 05       	cpc	r25, r1
 5b0:	49 f1       	breq	.+82     	; 0x604 <DIO_VidTogglePinValue+0x7e>
 5b2:	2b 81       	ldd	r18, Y+3	; 0x03
 5b4:	3c 81       	ldd	r19, Y+4	; 0x04
 5b6:	22 30       	cpi	r18, 0x02	; 2
 5b8:	31 05       	cpc	r19, r1
 5ba:	2c f4       	brge	.+10     	; 0x5c6 <DIO_VidTogglePinValue+0x40>
 5bc:	8b 81       	ldd	r24, Y+3	; 0x03
 5be:	9c 81       	ldd	r25, Y+4	; 0x04
 5c0:	00 97       	sbiw	r24, 0x00	; 0
 5c2:	61 f0       	breq	.+24     	; 0x5dc <DIO_VidTogglePinValue+0x56>
 5c4:	5a c0       	rjmp	.+180    	; 0x67a <DIO_VidTogglePinValue+0xf4>
 5c6:	2b 81       	ldd	r18, Y+3	; 0x03
 5c8:	3c 81       	ldd	r19, Y+4	; 0x04
 5ca:	22 30       	cpi	r18, 0x02	; 2
 5cc:	31 05       	cpc	r19, r1
 5ce:	71 f1       	breq	.+92     	; 0x62c <DIO_VidTogglePinValue+0xa6>
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	9c 81       	ldd	r25, Y+4	; 0x04
 5d4:	83 30       	cpi	r24, 0x03	; 3
 5d6:	91 05       	cpc	r25, r1
 5d8:	e9 f1       	breq	.+122    	; 0x654 <DIO_VidTogglePinValue+0xce>
 5da:	4f c0       	rjmp	.+158    	; 0x67a <DIO_VidTogglePinValue+0xf4>
		{
			case 0: Toggle_BIT(_PORTA,Copy_u8Pin); break;
 5dc:	ab e3       	ldi	r26, 0x3B	; 59
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	eb e3       	ldi	r30, 0x3B	; 59
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	48 2f       	mov	r20, r24
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 2e       	mov	r0, r18
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_VidTogglePinValue+0x74>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	0a 94       	dec	r0
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_VidTogglePinValue+0x70>
 5fe:	84 27       	eor	r24, r20
 600:	8c 93       	st	X, r24
 602:	3b c0       	rjmp	.+118    	; 0x67a <DIO_VidTogglePinValue+0xf4>
			case 1: Toggle_BIT(_PORTB,Copy_u8Pin); break;
 604:	a8 e3       	ldi	r26, 0x38	; 56
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e8 e3       	ldi	r30, 0x38	; 56
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	48 2f       	mov	r20, r24
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 2e       	mov	r0, r18
 61c:	02 c0       	rjmp	.+4      	; 0x622 <DIO_VidTogglePinValue+0x9c>
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	0a 94       	dec	r0
 624:	e2 f7       	brpl	.-8      	; 0x61e <DIO_VidTogglePinValue+0x98>
 626:	84 27       	eor	r24, r20
 628:	8c 93       	st	X, r24
 62a:	27 c0       	rjmp	.+78     	; 0x67a <DIO_VidTogglePinValue+0xf4>
			case 2: Toggle_BIT(_PORTC,Copy_u8Pin); break;
 62c:	a5 e3       	ldi	r26, 0x35	; 53
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	e5 e3       	ldi	r30, 0x35	; 53
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	48 2f       	mov	r20, r24
 638:	8a 81       	ldd	r24, Y+2	; 0x02
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 2e       	mov	r0, r18
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_VidTogglePinValue+0xc4>
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	0a 94       	dec	r0
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_VidTogglePinValue+0xc0>
 64e:	84 27       	eor	r24, r20
 650:	8c 93       	st	X, r24
 652:	13 c0       	rjmp	.+38     	; 0x67a <DIO_VidTogglePinValue+0xf4>
			case 3: Toggle_BIT(_PORTD,Copy_u8Pin); break;
 654:	a2 e3       	ldi	r26, 0x32	; 50
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	e2 e3       	ldi	r30, 0x32	; 50
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	48 2f       	mov	r20, r24
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 2e       	mov	r0, r18
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_VidTogglePinValue+0xec>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	0a 94       	dec	r0
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_VidTogglePinValue+0xe8>
 676:	84 27       	eor	r24, r20
 678:	8c 93       	st	X, r24
		}		
	}
}
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8Val)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	00 d0       	rcall	.+0      	; 0x68e <DIO_VidSetPortDirection+0x6>
 68e:	00 d0       	rcall	.+0      	; 0x690 <DIO_VidSetPortDirection+0x8>
 690:	cd b7       	in	r28, 0x3d	; 61
 692:	de b7       	in	r29, 0x3e	; 62
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 698:	89 81       	ldd	r24, Y+1	; 0x01
 69a:	28 2f       	mov	r18, r24
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	3c 83       	std	Y+4, r19	; 0x04
 6a0:	2b 83       	std	Y+3, r18	; 0x03
 6a2:	8b 81       	ldd	r24, Y+3	; 0x03
 6a4:	9c 81       	ldd	r25, Y+4	; 0x04
 6a6:	81 30       	cpi	r24, 0x01	; 1
 6a8:	91 05       	cpc	r25, r1
 6aa:	d1 f0       	breq	.+52     	; 0x6e0 <DIO_VidSetPortDirection+0x58>
 6ac:	2b 81       	ldd	r18, Y+3	; 0x03
 6ae:	3c 81       	ldd	r19, Y+4	; 0x04
 6b0:	22 30       	cpi	r18, 0x02	; 2
 6b2:	31 05       	cpc	r19, r1
 6b4:	2c f4       	brge	.+10     	; 0x6c0 <DIO_VidSetPortDirection+0x38>
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03
 6b8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <DIO_VidSetPortDirection+0x4e>
 6be:	1e c0       	rjmp	.+60     	; 0x6fc <DIO_VidSetPortDirection+0x74>
 6c0:	2b 81       	ldd	r18, Y+3	; 0x03
 6c2:	3c 81       	ldd	r19, Y+4	; 0x04
 6c4:	22 30       	cpi	r18, 0x02	; 2
 6c6:	31 05       	cpc	r19, r1
 6c8:	81 f0       	breq	.+32     	; 0x6ea <DIO_VidSetPortDirection+0x62>
 6ca:	8b 81       	ldd	r24, Y+3	; 0x03
 6cc:	9c 81       	ldd	r25, Y+4	; 0x04
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	91 05       	cpc	r25, r1
 6d2:	81 f0       	breq	.+32     	; 0x6f4 <DIO_VidSetPortDirection+0x6c>
 6d4:	13 c0       	rjmp	.+38     	; 0x6fc <DIO_VidSetPortDirection+0x74>
	{
		case 0: DDRA = Copy_u8Val; break;
 6d6:	ea e3       	ldi	r30, 0x3A	; 58
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	8a 81       	ldd	r24, Y+2	; 0x02
 6dc:	80 83       	st	Z, r24
 6de:	0e c0       	rjmp	.+28     	; 0x6fc <DIO_VidSetPortDirection+0x74>
		case 1: DDRB = Copy_u8Val; break;
 6e0:	e7 e3       	ldi	r30, 0x37	; 55
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	8a 81       	ldd	r24, Y+2	; 0x02
 6e6:	80 83       	st	Z, r24
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <DIO_VidSetPortDirection+0x74>
		case 2: DDRC = Copy_u8Val; break;
 6ea:	e4 e3       	ldi	r30, 0x34	; 52
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	80 83       	st	Z, r24
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <DIO_VidSetPortDirection+0x74>
		case 3: DDRD = Copy_u8Val; break;
 6f4:	e1 e3       	ldi	r30, 0x31	; 49
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	80 83       	st	Z, r24
	}
}
 6fc:	0f 90       	pop	r0
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Val)
{
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_VidSetPortValue+0x6>
 710:	00 d0       	rcall	.+0      	; 0x712 <DIO_VidSetPortValue+0x8>
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	89 83       	std	Y+1, r24	; 0x01
 718:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	28 2f       	mov	r18, r24
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	3c 83       	std	Y+4, r19	; 0x04
 722:	2b 83       	std	Y+3, r18	; 0x03
 724:	8b 81       	ldd	r24, Y+3	; 0x03
 726:	9c 81       	ldd	r25, Y+4	; 0x04
 728:	81 30       	cpi	r24, 0x01	; 1
 72a:	91 05       	cpc	r25, r1
 72c:	d1 f0       	breq	.+52     	; 0x762 <DIO_VidSetPortValue+0x58>
 72e:	2b 81       	ldd	r18, Y+3	; 0x03
 730:	3c 81       	ldd	r19, Y+4	; 0x04
 732:	22 30       	cpi	r18, 0x02	; 2
 734:	31 05       	cpc	r19, r1
 736:	2c f4       	brge	.+10     	; 0x742 <DIO_VidSetPortValue+0x38>
 738:	8b 81       	ldd	r24, Y+3	; 0x03
 73a:	9c 81       	ldd	r25, Y+4	; 0x04
 73c:	00 97       	sbiw	r24, 0x00	; 0
 73e:	61 f0       	breq	.+24     	; 0x758 <DIO_VidSetPortValue+0x4e>
 740:	1e c0       	rjmp	.+60     	; 0x77e <DIO_VidSetPortValue+0x74>
 742:	2b 81       	ldd	r18, Y+3	; 0x03
 744:	3c 81       	ldd	r19, Y+4	; 0x04
 746:	22 30       	cpi	r18, 0x02	; 2
 748:	31 05       	cpc	r19, r1
 74a:	81 f0       	breq	.+32     	; 0x76c <DIO_VidSetPortValue+0x62>
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	9c 81       	ldd	r25, Y+4	; 0x04
 750:	83 30       	cpi	r24, 0x03	; 3
 752:	91 05       	cpc	r25, r1
 754:	81 f0       	breq	.+32     	; 0x776 <DIO_VidSetPortValue+0x6c>
 756:	13 c0       	rjmp	.+38     	; 0x77e <DIO_VidSetPortValue+0x74>
	{
		case 0: _PORTA = Copy_u8Val; break;
 758:	eb e3       	ldi	r30, 0x3B	; 59
 75a:	f0 e0       	ldi	r31, 0x00	; 0
 75c:	8a 81       	ldd	r24, Y+2	; 0x02
 75e:	80 83       	st	Z, r24
 760:	0e c0       	rjmp	.+28     	; 0x77e <DIO_VidSetPortValue+0x74>
		case 1: _PORTB = Copy_u8Val; break;
 762:	e8 e3       	ldi	r30, 0x38	; 56
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	8a 81       	ldd	r24, Y+2	; 0x02
 768:	80 83       	st	Z, r24
 76a:	09 c0       	rjmp	.+18     	; 0x77e <DIO_VidSetPortValue+0x74>
		case 2: _PORTC = Copy_u8Val; break;
 76c:	e5 e3       	ldi	r30, 0x35	; 53
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	8a 81       	ldd	r24, Y+2	; 0x02
 772:	80 83       	st	Z, r24
 774:	04 c0       	rjmp	.+8      	; 0x77e <DIO_VidSetPortValue+0x74>
		case 3: _PORTD = Copy_u8Val; break;
 776:	e2 e3       	ldi	r30, 0x32	; 50
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	80 83       	st	Z, r24
	}
}
 77e:	0f 90       	pop	r0
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	cf 91       	pop	r28
 788:	df 91       	pop	r29
 78a:	08 95       	ret

0000078c <RTOS_VidCreatTask>:


task System_Tasks[TasksNumber];

void RTOS_VidCreatTask(u32 Copy_U8Periodicity, u8 Copy_U8Periorty, void (*pfunc)(void))
{
 78c:	df 93       	push	r29
 78e:	cf 93       	push	r28
 790:	00 d0       	rcall	.+0      	; 0x792 <RTOS_VidCreatTask+0x6>
 792:	00 d0       	rcall	.+0      	; 0x794 <RTOS_VidCreatTask+0x8>
 794:	0f 92       	push	r0
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	9a 83       	std	Y+2, r25	; 0x02
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	6b 83       	std	Y+3, r22	; 0x03
 7a0:	5d 83       	std	Y+5, r21	; 0x05
 7a2:	4c 83       	std	Y+4, r20	; 0x04
	System_Tasks[Copy_U8Periorty].func = pfunc;
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	88 2f       	mov	r24, r24
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	88 0f       	add	r24, r24
 7b0:	99 1f       	adc	r25, r25
 7b2:	fc 01       	movw	r30, r24
 7b4:	ee 59       	subi	r30, 0x9E	; 158
 7b6:	ff 4f       	sbci	r31, 0xFF	; 255
 7b8:	8c 81       	ldd	r24, Y+4	; 0x04
 7ba:	9d 81       	ldd	r25, Y+5	; 0x05
 7bc:	91 83       	std	Z+1, r25	; 0x01
 7be:	80 83       	st	Z, r24
	System_Tasks[Copy_U8Periorty].periodicity = Copy_U8Periodicity;
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	88 2f       	mov	r24, r24
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	fc 01       	movw	r30, r24
 7d2:	ee 59       	subi	r30, 0x9E	; 158
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	89 81       	ldd	r24, Y+1	; 0x01
 7d8:	9a 81       	ldd	r25, Y+2	; 0x02
 7da:	91 83       	std	Z+1, r25	; 0x01
 7dc:	80 83       	st	Z, r24
}
 7de:	0f 90       	pop	r0
 7e0:	0f 90       	pop	r0
 7e2:	0f 90       	pop	r0
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	cf 91       	pop	r28
 7ea:	df 91       	pop	r29
 7ec:	08 95       	ret

000007ee <RTOS_VidSchaduler>:

void RTOS_VidSchaduler(void)
{
 7ee:	df 93       	push	r29
 7f0:	cf 93       	push	r28
 7f2:	0f 92       	push	r0
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
	static u16 TickCounter = 0;
	TickCounter++;
 7f8:	80 91 60 00 	lds	r24, 0x0060
 7fc:	90 91 61 00 	lds	r25, 0x0061
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	90 93 61 00 	sts	0x0061, r25
 806:	80 93 60 00 	sts	0x0060, r24
	
	for(u8 i=0; i<TasksNumber; i++)
 80a:	19 82       	std	Y+1, r1	; 0x01
 80c:	28 c0       	rjmp	.+80     	; 0x85e <RTOS_VidSchaduler+0x70>
	{
		if(TickCounter % System_Tasks[i].periodicity == 0)
 80e:	40 91 60 00 	lds	r20, 0x0060
 812:	50 91 61 00 	lds	r21, 0x0061
 816:	89 81       	ldd	r24, Y+1	; 0x01
 818:	88 2f       	mov	r24, r24
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	01 96       	adiw	r24, 0x01	; 1
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	fc 01       	movw	r30, r24
 828:	ee 59       	subi	r30, 0x9E	; 158
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	20 81       	ld	r18, Z
 82e:	31 81       	ldd	r19, Z+1	; 0x01
 830:	ca 01       	movw	r24, r20
 832:	b9 01       	movw	r22, r18
 834:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__udivmodhi4>
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	71 f4       	brne	.+28     	; 0x858 <RTOS_VidSchaduler+0x6a>
		{
			System_Tasks[i].func();
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	88 2f       	mov	r24, r24
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	fc 01       	movw	r30, r24
 84c:	ee 59       	subi	r30, 0x9E	; 158
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	01 90       	ld	r0, Z+
 852:	f0 81       	ld	r31, Z
 854:	e0 2d       	mov	r30, r0
 856:	09 95       	icall
void RTOS_VidSchaduler(void)
{
	static u16 TickCounter = 0;
	TickCounter++;
	
	for(u8 i=0; i<TasksNumber; i++)
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	8f 5f       	subi	r24, 0xFF	; 255
 85c:	89 83       	std	Y+1, r24	; 0x01
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	83 30       	cpi	r24, 0x03	; 3
 862:	a8 f2       	brcs	.-86     	; 0x80e <RTOS_VidSchaduler+0x20>
		if(TickCounter % System_Tasks[i].periodicity == 0)
		{
			System_Tasks[i].func();
		}
	}
}
 864:	0f 90       	pop	r0
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	08 95       	ret

0000086c <RTOS_TIMER0_VidInit>:


void RTOS_TIMER0_VidInit()
{
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
	// CTC Mode
	CLR_BIT(TCCR0,6);
 874:	a3 e5       	ldi	r26, 0x53	; 83
 876:	b0 e0       	ldi	r27, 0x00	; 0
 878:	e3 e5       	ldi	r30, 0x53	; 83
 87a:	f0 e0       	ldi	r31, 0x00	; 0
 87c:	80 81       	ld	r24, Z
 87e:	8f 7b       	andi	r24, 0xBF	; 191
 880:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
 882:	a3 e5       	ldi	r26, 0x53	; 83
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e3 e5       	ldi	r30, 0x53	; 83
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	80 81       	ld	r24, Z
 88c:	88 60       	ori	r24, 0x08	; 8
 88e:	8c 93       	st	X, r24
	
	// prescaling   --> clk/64
	CLR_BIT(TCCR0,2);
 890:	a3 e5       	ldi	r26, 0x53	; 83
 892:	b0 e0       	ldi	r27, 0x00	; 0
 894:	e3 e5       	ldi	r30, 0x53	; 83
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	80 81       	ld	r24, Z
 89a:	8b 7f       	andi	r24, 0xFB	; 251
 89c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,1);
 89e:	a3 e5       	ldi	r26, 0x53	; 83
 8a0:	b0 e0       	ldi	r27, 0x00	; 0
 8a2:	e3 e5       	ldi	r30, 0x53	; 83
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	82 60       	ori	r24, 0x02	; 2
 8aa:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
 8ac:	a3 e5       	ldi	r26, 0x53	; 83
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	e3 e5       	ldi	r30, 0x53	; 83
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	80 81       	ld	r24, Z
 8b6:	81 60       	ori	r24, 0x01	; 1
 8b8:	8c 93       	st	X, r24
	
	// preload value of timer0

	OCR0 = 125;
 8ba:	ec e5       	ldi	r30, 0x5C	; 92
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	8d e7       	ldi	r24, 0x7D	; 125
 8c0:	80 83       	st	Z, r24
	
	//  Timer/Counter0 Overflow Interrupt Enable (TOIE)
	SET_BIT(TIMSK,1);
 8c2:	a9 e5       	ldi	r26, 0x59	; 89
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	e9 e5       	ldi	r30, 0x59	; 89
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	8c 93       	st	X, r24
	
	// GIE=1
	SET_BIT(SREG,7);
 8d0:	af e5       	ldi	r26, 0x5F	; 95
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	ef e5       	ldi	r30, 0x5F	; 95
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	80 68       	ori	r24, 0x80	; 128
 8dc:	8c 93       	st	X, r24
}
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <__vector_10>:


void __vector_10(void)
{
 8e4:	1f 92       	push	r1
 8e6:	0f 92       	push	r0
 8e8:	0f b6       	in	r0, 0x3f	; 63
 8ea:	0f 92       	push	r0
 8ec:	11 24       	eor	r1, r1
 8ee:	2f 93       	push	r18
 8f0:	3f 93       	push	r19
 8f2:	4f 93       	push	r20
 8f4:	5f 93       	push	r21
 8f6:	6f 93       	push	r22
 8f8:	7f 93       	push	r23
 8fa:	8f 93       	push	r24
 8fc:	9f 93       	push	r25
 8fe:	af 93       	push	r26
 900:	bf 93       	push	r27
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
	RTOS_VidSchaduler();
 90e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <RTOS_VidSchaduler>
}
 912:	cf 91       	pop	r28
 914:	df 91       	pop	r29
 916:	ff 91       	pop	r31
 918:	ef 91       	pop	r30
 91a:	bf 91       	pop	r27
 91c:	af 91       	pop	r26
 91e:	9f 91       	pop	r25
 920:	8f 91       	pop	r24
 922:	7f 91       	pop	r23
 924:	6f 91       	pop	r22
 926:	5f 91       	pop	r21
 928:	4f 91       	pop	r20
 92a:	3f 91       	pop	r19
 92c:	2f 91       	pop	r18
 92e:	0f 90       	pop	r0
 930:	0f be       	out	0x3f, r0	; 63
 932:	0f 90       	pop	r0
 934:	1f 90       	pop	r1
 936:	18 95       	reti

00000938 <tog_led1>:
#include "RTOS_Interface.h"



void tog_led1()
{
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePinValue(PORTA, 0);
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_VidTogglePinValue>
}
 948:	cf 91       	pop	r28
 94a:	df 91       	pop	r29
 94c:	08 95       	ret

0000094e <tog_led2>:

void tog_led2()
{
 94e:	df 93       	push	r29
 950:	cf 93       	push	r28
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePinValue(PORTA, 1);
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	61 e0       	ldi	r22, 0x01	; 1
 95a:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_VidTogglePinValue>
}
 95e:	cf 91       	pop	r28
 960:	df 91       	pop	r29
 962:	08 95       	ret

00000964 <tog_led3>:

void tog_led3()
{
 964:	df 93       	push	r29
 966:	cf 93       	push	r28
 968:	cd b7       	in	r28, 0x3d	; 61
 96a:	de b7       	in	r29, 0x3e	; 62
	DIO_VidTogglePinValue(PORTA, 2);
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	62 e0       	ldi	r22, 0x02	; 2
 970:	0e 94 c3 02 	call	0x586	; 0x586 <DIO_VidTogglePinValue>
}
 974:	cf 91       	pop	r28
 976:	df 91       	pop	r29
 978:	08 95       	ret

0000097a <main>:



int main()
{
 97a:	df 93       	push	r29
 97c:	cf 93       	push	r28
 97e:	cd b7       	in	r28, 0x3d	; 61
 980:	de b7       	in	r29, 0x3e	; 62
	DIO_VidSetPinDirection(PORTA,0,OUTPUT);
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	41 e0       	ldi	r20, 0x01	; 1
 988:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTA,1,OUTPUT);
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	41 e0       	ldi	r20, 0x01	; 1
 992:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PORTA,2,OUTPUT);
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	62 e0       	ldi	r22, 0x02	; 2
 99a:	41 e0       	ldi	r20, 0x01	; 1
 99c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_VidSetPinDirection>

	RTOS_VidCreatTask(1000,0,&tog_led1);
 9a0:	2c e9       	ldi	r18, 0x9C	; 156
 9a2:	34 e0       	ldi	r19, 0x04	; 4
 9a4:	88 ee       	ldi	r24, 0xE8	; 232
 9a6:	93 e0       	ldi	r25, 0x03	; 3
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	a9 01       	movw	r20, r18
 9ac:	0e 94 c6 03 	call	0x78c	; 0x78c <RTOS_VidCreatTask>
	RTOS_VidCreatTask(2000,1,&tog_led2);
 9b0:	27 ea       	ldi	r18, 0xA7	; 167
 9b2:	34 e0       	ldi	r19, 0x04	; 4
 9b4:	80 ed       	ldi	r24, 0xD0	; 208
 9b6:	97 e0       	ldi	r25, 0x07	; 7
 9b8:	61 e0       	ldi	r22, 0x01	; 1
 9ba:	a9 01       	movw	r20, r18
 9bc:	0e 94 c6 03 	call	0x78c	; 0x78c <RTOS_VidCreatTask>
	RTOS_VidCreatTask(3000,2,&tog_led3);
 9c0:	22 eb       	ldi	r18, 0xB2	; 178
 9c2:	34 e0       	ldi	r19, 0x04	; 4
 9c4:	88 eb       	ldi	r24, 0xB8	; 184
 9c6:	9b e0       	ldi	r25, 0x0B	; 11
 9c8:	62 e0       	ldi	r22, 0x02	; 2
 9ca:	a9 01       	movw	r20, r18
 9cc:	0e 94 c6 03 	call	0x78c	; 0x78c <RTOS_VidCreatTask>

	RTOS_TIMER0_VidInit();
 9d0:	0e 94 36 04 	call	0x86c	; 0x86c <RTOS_TIMER0_VidInit>
 9d4:	ff cf       	rjmp	.-2      	; 0x9d4 <main+0x5a>

000009d6 <__udivmodhi4>:
 9d6:	aa 1b       	sub	r26, r26
 9d8:	bb 1b       	sub	r27, r27
 9da:	51 e1       	ldi	r21, 0x11	; 17
 9dc:	07 c0       	rjmp	.+14     	; 0x9ec <__udivmodhi4_ep>

000009de <__udivmodhi4_loop>:
 9de:	aa 1f       	adc	r26, r26
 9e0:	bb 1f       	adc	r27, r27
 9e2:	a6 17       	cp	r26, r22
 9e4:	b7 07       	cpc	r27, r23
 9e6:	10 f0       	brcs	.+4      	; 0x9ec <__udivmodhi4_ep>
 9e8:	a6 1b       	sub	r26, r22
 9ea:	b7 0b       	sbc	r27, r23

000009ec <__udivmodhi4_ep>:
 9ec:	88 1f       	adc	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	5a 95       	dec	r21
 9f2:	a9 f7       	brne	.-22     	; 0x9de <__udivmodhi4_loop>
 9f4:	80 95       	com	r24
 9f6:	90 95       	com	r25
 9f8:	bc 01       	movw	r22, r24
 9fa:	cd 01       	movw	r24, r26
 9fc:	08 95       	ret

000009fe <_exit>:
 9fe:	f8 94       	cli

00000a00 <__stop_program>:
 a00:	ff cf       	rjmp	.-2      	; 0xa00 <__stop_program>
